{
  "2019-01-18-python2-to-3": {
    "layout": "blog",
    "title": "101 migrating python 2 to 3",
    "date": "2019-01-18T00:00:00.000Z",
    "quote": "lorem ipsum dolor sit amet, consectetur adipisicing elit",
    "photo": "photo",
    "photo_author": "john doe",
    "photo_url": "https://images.unsplash.com/photo-1532898443887-fd49ec789306?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
    "description": "lorem ipsum",
    "author": "teleyinex",
    "preview": "we've just started 2019, but hey, the clock is ticking, and we only …",
    "content": "\n\nwe've just started 2019, but hey, the clock is ticking, and we only have 11 months to port all our python2.x code to version 3. are you ready? in this blog post, we will share a few tips that we have learned while migrating our pybossa code to python 3.\n<div style=\"width:100%;height:0;padding-bottom:75%;position:relative;\"><iframe src=\"https://giphy.com/embed/thnsw0hz534dc\" width=\"100%\" height=\"100%\" style=\"position:absolute\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen></iframe></div><p><a href=\"https://giphy.com/gifs/countdown-thnsw0hz534dc\">via giphy</a></p>\n\n## creating a virtual environment\n\nwe always run our python libraries within a virtual env. however, you don't create them in the same way. in python 2, you do it like this:\n\n```\nvirtualenv env\n```\nwhile for python 3 you should do the following:\n\n```\npython3 -m venv env\n```\nthen you can activate it as usual:\n\n```\nsource env/bin/activate\n```\n# using 2to3 to save some time\nevery project varies in size and number of lines of code, but you, the developer want to be fast on this, right? or at least not too painful.\n\npython has a beneficial tool that will help you to migrate your old code to the new version by only running a command line: 2to3.\n\nthis command is pretty simple. if you want to see the changes that it will do to your code, you just run it like this:\n\n```\n2to3 example.py\n```\nif you want to write the changes directly into your example.py file, pass a -w. be sure to use git (or something similar so that you can check the differences):\n```\n2to3 -w example.py\n```\nand if you want, you can do something crazy like changing all files at once:\n```\n2to3 -w *.py\n```\nthen, check the damage ;-)\n\n## strings, bytes, utf-8, aka your nightmare\nwhile migrating pybossa to python3 most of the issues on our side were related to utf-8 and how we had the strings in python 2.\n\nthe general advice is to check for the type of the strings, and based on that do whatever you need.\n\n### bytes to strings\n```\nif type(foo) == bytes:\n\tbytes.decode('utf-8')\n```\n### strings to bytes\nyou will have several places where your code will fail because now python 3 expects bytes instead of strings. for those cases, you can do the following:\n\n```\nif type(foo) == str:\n\tbytes.encode('utf-8')\n```\n\n### stringio and bytesio\nyou have probably used stringio in your code. well, it will not work probably in your migration. you will need to adapt it. usually, based on the type of the text, you will have to use stringio or bytesio. both will solve it for you. a typical case is like this:\n\n```\nif type(foo) == bytes:\n\tdata = bytesio(foo)\nelse:\n\tdata = stringio(foo)\n```\n\n### csv and utf-8\nwe used the old python 2 csv utf-8 reader example given in the documentation. for python 2 it works great, but when you try it in python 3, everything goes to hell :-)\n\nthe solution? use pandas. yes, pandas. it will make your life so much easier.\n\npandas will handle everything for you. all you have to do is replace your csv_reader with this:\n\n```\nimport pandas as pd\ndf = pd.read_csv(yourfile)\n```\nif you then need to test this code, and you don't have a file, use the previous stringio or bytesio to do the magic. then, load it, and you are done!\n\n```\ndef do_something(csvfile):\n\treturn pandas.read_csv(csvfile)\n\ndef test_01():\n\tfakefile = stringio('foo,bar\\n,1,2')\n\tdf = do_something(fakefile)\n        # check whatever you want\n```\nand that's it. nothing else ;-) well, yes, put all your prints with () :d\n",
    "iso8601Date": "2019-01-18T01:00:00+01:00",
    "basename": "2019-01-18-python2-to-3"
  },
  "2019-01-24-lorem": {
    "layout": "blog",
    "title": "Lorem ipsum dolor",
    "date": "2019-01-18T00:00:00.000Z",
    "quote": "lorem ipsum dolor sit amet, consectetur adipisicing elit",
    "photo": "photo",
    "photo_author": "john doe",
    "photo_url": "https://images.unsplash.com/photo-1506171806810-8b895a54b111?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80",
    "description": "lorem ipsum",
    "author": "teleyinex",
    "preview": "---\n__Advertisement :)__\n\n- …",
    "content": "\n\n\n---\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\n  resize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n",
    "iso8601Date": "2019-01-18T01:00:00+01:00",
    "basename": "2019-01-24-lorem"
  }
}
